leetcode:2 Add Two numbers

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int sum=0,c=0;
        ListNode *temp1,*temp2;
        temp1=l1;
        temp2=l2;
        ListNode *ans=new ListNode(-1);
        ListNode *temp=ans;
        while(temp1 or temp2 or c)
        {
            sum=0;
            if(temp1)
            {
                sum=sum+temp1->val;
                temp1=temp1->next;
            }
            if(temp2)
            {
                sum=sum+temp2->val;
                temp2=temp2->next;
            }
            sum=sum+c;
            ans->next=new ListNode(sum%10);
            c=sum/10;
            ans=ans->next;
        }
        return temp->next;
    }
};
Leetcode 138 Copy List with random Pointer 
class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node *temp = head;
        map<Node*, Node*> mapp;
        while (temp != NULL) {
            Node *copy = new Node(temp->val);
            mapp[temp] = copy;
            temp = temp->next;
        }
        temp = head;
        while (temp != NULL) {
            mapp[temp] ->next = mapp[temp->next];
            mapp[temp] ->random = mapp[temp->random];
            temp=temp->next;
        }
        return mapp[head];
    }
};

leetcode:445 Add Two Number II

class Solution {
public:
    ListNode* reverse(ListNode* head) {
        if(head->next == NULL)
            return head;
            
        ListNode* prev = nullptr;
        ListNode* curr = head;
        ListNode* temp = head->next;
        
        while(curr != NULL) {
            curr->next = prev;
            prev = curr;
            curr = temp;
            
            if(temp != NULL)
                temp = temp->next;
        }
        
         return prev;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        
        ListNode* result = new ListNode;
        
        int carry = 0;
        
        ListNode* ptr = result;
        while(l1 != NULL && l2 != NULL) {
            ListNode* newNode = new ListNode;
            ptr->next = newNode;
            ptr = newNode;
            
             if(l1->val + l2->val + carry >= 10) {               
                newNode->val = (l1->val + l2->val + carry) % 10;
                 carry = 1;
             } 
            
            else {
                newNode->val = l1->val + l2->val + carry;
                carry = 0;
            }
            l1 = l1->next;
            l2 = l2->next;
        }
        
        while(l1 != NULL) {
            ListNode* newNode = new ListNode;
            if(l1->val + carry >= 10) {
                newNode->val = (l1->val + carry) % 10;                  
            } 
            else {
                newNode->val = l1->val + carry;
                carry = 0;
            }            
            ptr->next = newNode;
            ptr = newNode;
            l1 = l1->next;
        }
        
        while(l2 != NULL) {
            ListNode* newNode = new ListNode(l2->val);
            
            if(l2->val + carry >= 10) {
                newNode->val = (l2->val + carry) % 10;                  
            } 
            else {
                newNode->val = l2->val + carry;
                carry = 0;
            }
            ptr->next = newNode;
            ptr = newNode;
            l2 = l2->next;
        }
        
        if(carry == 1) {
            ListNode* newNode = new ListNode(1);
            ptr->next = newNode;
        }
        
        ListNode* answer = reverse(result->next);
        
            return answer;
        
        
    }
};

Reverse A linked list ||

class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(head == NULL || head->next == NULL) return head;
        if(left == 1) {
            head = reverseList(head, right - left);
            return head;
        }
        ListNode *temp = head;
        int i = 1;
        while(i != left - 1 && temp) {
            temp = temp->next;
            i++;
        }
        temp->next = reverseList(temp->next, right - left);
        return head;
    }
    
    ListNode* reverseList(ListNode* head, int idx) {
        if(head == NULL) return head;
        ListNode *p = NULL, *q = NULL, *r = NULL;
        q = r = head;
        p = head->next;
        r->next = NULL;
        ListNode *temp = r;
        int i = 0;
        while(p != NULL && i != idx) {
            r = q;
            q = p;
            p = p->next;
            q->next = r;
            i++;
        }
        head = q;
        while(p) {
            temp->next = p;
            temp = p;
            p = p->next;
        }
        return head;
    }
};


Leetcode 143. Reorder List


class Solution {
private:
    ListNode *start, *result;
    int total, count;
    

    void reverseList(ListNode* head){
        if(head){
            count++;
            reverseList(head->next);
            total++;
            if(total<(count/2)){
                head->next=start->next;
                start->next=head;
                start=head->next;
            }
            else if(total==(count/2)){
                if(count%2){
                    head->next=start->next;
                    start->next=head;
                    head->next->next=NULL;
                }
                else
                    head->next=NULL;
            }
                
        }
    }
public:
    void reorderList(ListNode* head) {
        start=head;
        count=0;
        total=0;
        reverseList(head);
    }
};

ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode * start = new ListNode();
        start -> next = head;
        ListNode* fast = start;
        ListNode* slow = start;     

        for(int i = 1; i <= n; ++i)
            fast = fast->next;
    
        while(fast->next != NULL)
        {
            fast = fast->next;
            slow = slow->next;
        }
        
        slow->next = slow->next->next;
        
        return start->next;
    }
