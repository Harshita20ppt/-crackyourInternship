Find the Duplicate Number: LEETCODE_287
class Solution {
public:
    // Using XOR 
int findDuplicate(vector<int> &nums) {
    int n = nums.size();
int ans = 0;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++){
                if(nums[i]==nums[i+1]){
                        return nums[i];
                }else{
                        ans = ans ^ i ^ nums[i];
                }
            }
        return ans; 
}
};

SORT COLORS: LEETCODE_75
class Solution {
public:
       
    void sortColors(vector<int>& nums) {
        int low=0,mid=0,high=nums.size()-1;
        while( mid <= high)
        {
            if(nums[mid]==0)
            {
                swap(nums[low],nums[mid]);
                    low++;
                    mid++;
            }
            
            else if(nums[mid]==1)
            {
                mid++;
            }
            else if(nums[mid]==2)
            {
               swap(nums[mid],nums[high]);
                    high--; 
            }
             
        }
    }
};
Set Matrix Zeroes: LEETCODE 73 
class Solution {
public:
   void setZeroes(vector<vector<int>>& matrix) {
        int col0 = 1, rows = matrix.size(), cols = matrix[0].size(); 
         for (int i = 0; i < rows; i++){
             if (matrix[i][0] == 0) col0 = 0; 
          for (int j = 1; j < cols; j++)
             if (matrix[i][j] == 0)
              matrix[i][0] = matrix[0][j] = 0;
          }
                  
                                                

           for (int i= rows-1; i >= 0; i--) { 
         for (int j = cols - 1; j >= 1; j--)
         if (matrix[i][0]== 0 || matrix[0][j] == 0) 
             matrix[i][j] = 0;
          if (col0 == 0) matrix[i][0] = 0;
            }
    }
};

best time to buy or sell :LEETCODE_121
class Solution {
public:
    int maxProfit(vector<int>& prices) {
	
        int maxPro=0;
        int minp=INT_MAX;
		
        for(int i=0;i<prices.size();i++){
            minp=min(minp,prices[i]);
            maxPro=max(maxPro,prices[i]-minp);
        }
		
        return maxPro;
    }
};


Rotate Image: LEETcode_48
void rotate(vector<vector<int>>& matrix) {
        int n=matrix[0].size();
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                swap(matrix[i][j],matrix[j][i]);
            }
        }
        for(int i=0;i<n;i++){
            reverse(matrix[i].begin(),matrix[i].end());
        }
    }

Container With Most Water: LEETCODE_11
    class Solution {
public:
    int maxArea(vector<int>& height) {
        int l=0,r=height.size()-1;
        int lh,rh,max_w=0;
        while(l<r){                                   
            lh = height[l];  rh = height[r];          
            max_w = max(max_w,(min(lh,rh))*(r-l));    
            (lh<rh)?l++:r--;     
        }
        return max_w;
    }
};

 MAJORITY ELEMENT: leetcode_169
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count=0;
        int ans=0;
        for(int i=0;i<nums.size();i++){
            if(count==0){
                ans = nums[i];
            }
            if(ans==nums[i]){
                count++;
            }
            else{
                count--;
            }
        }
        return ans;
    }
};

Two Sum:Leetcode_01
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
      unordered_map<int,int>mp;
        for(int i=0;i<nums.size();i++)
        {
            if(mp.find(target-nums[i])!=mp.end())
                return {mp[target-nums[i]],i};
            else
                mp[nums[i]]=i;
        }
        return {};
    }
};    
    Valid Prenthesis
class Solution {
public:
    bool isValid(string s) {
       stack<int>help;
        int n =s.length();
        for(int i=0; i<n;i++){
            if(help.empty()and (s[i]==')' or s[i]=='}' or s[i]==']')){
                return false;
            }
            else if(s[i] == '(' or s[i]=='{' or s[i] =='['){
                help.push(s[i]);
            }
            else if((help.top() == '(' and s[i] == ')') or (help.top() == '{' and s[i] =='}') or (help.top() == '[' and s[i]== ']')){
                help.pop();
            }
            else return false;
        }
        if(!help.empty()){
            return false;
        }
    return true;
    }
};
 

3 sum :LEETCODE 15
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>>res;
        
        for(int i=0;i<n-2;i++){
            if(i==0||(i>0&&nums[i]!=nums[i-1])){// fixed a on one place
                int low=i+1; // then do binary search for  finding b+c
                int high = n-1;
                int sum = 0-nums[i]; //sum=0-a
                while(low<high){
                    if(nums[low]+nums[high]==sum){ //b+c=-a
                        vector<int>temp;
                        temp.push_back(nums[i]);
                        temp.push_back(nums[low]);
                        temp.push_back(nums[high]);
                        res.push_back(temp);
                        while(low<high&&nums[low]==nums[low+1]){ // for duplicacy in left side
                            low++;
                        }  
                         while(low<high&&nums[high]==nums[high-1]){ // for duplicacy in right side
                            high--;
                        }  
                        low++;
                        high--;
                    }
                    else if(nums[low]+nums[high]<sum){
                        low++;
                    }
                    else{
                        high--;
                    }
                }
            }
        }
        return res;
    }
};

REmove Duplicates: leetcode:26
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int i=1, k=1;
        while(k<nums.size()){
            if(nums[k]!=nums[k-1])
                nums[i++]=nums[k];
            
            k++;
        }
        
        return i;
    }
};

MOVE ZEROES:Leetcode 283
class Solution {
public:
    void moveZeroes(vector<int>& arr) {
        int i = 0;
        int n = arr.size();
        for(int j = 0 ; j < n ; j++){
            if(arr[j] != 0){
                swap(arr[i],arr[j]);
                i++;
            }
        }
    }
};

Subarray sum divisible by k:Leetcode 974
class Solution {
public:
     int subarraysDivByK(vector<int>& nums, int k) {
         
         unordered_map<int,int> m;
         int sum = 0;
         int rem = 0;
         m[rem]++;
         
         int c = 0;
         for(int i=0;i<nums.size();i++){
             sum += nums[i];
             if(sum < 0){
                 sum = -(abs(sum)%k);
             }
             rem = (sum+k)%k;
             
             if(m[rem]){
                 cout<<rem<<" ";
                 c += m[rem];
             }else if(rem%k == 0){
                 c++;
             }
             m[rem]++;
         }
         return c;
    }
};
 
                                                                                 DAY 3

4 SUM
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n=nums.size();
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1])
                continue;
            for(int j=i+1;j<n;j++){
                if(j!=(i+1) && nums[j]==nums[j-1])
                    continue;
                int rem=target-(nums[i]+nums[j]);
                int p1=j+1;
                int p2=n-1;
                while(p1<p2){
                    int curr=nums[p1]+nums[p2];
                    if(curr<rem)
                        p1++;
                    else if(curr>rem)
                        p2--;
                    else{
                        ans.push_back({nums[i],nums[j],nums[p1],nums[p2]});
                        if(nums[p1]==nums[p2])
                            break;
                            int x=nums[p1];
                            int y=nums[p2];
                            while(x==nums[p1])
                                p1++;
                            while(y==nums[p2])
                                p2--;
                        
                    }
                }
            }
        }
        return ans;
    }
};

Maximum Points You Can Obtain from Cards

class Solution {
public:
    int maxScore(vector<int>& cardPoints, int k) {
        int tmp = 0, ans = 0, n = cardPoints.size();
        for(int i = 0; i < k; i++){tmp += cardPoints[i];}
        ans = tmp;
        for(int i = 0; i < k; i++){ans = max(ans, tmp += cardPoints[n - i - 1] - cardPoints[k - i - 1]);}
        return ans;
    }
};

Subarray Sum Equals K

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int , int> mp;
        
        mp[0] = 1;
        
        int count = 0;int sum = 0;
        for(int i = 0;i<nums.size();i++){
            sum += nums[i];
            
            if(mp.find(sum - k)!=mp.end()){
                count += mp[sum - k];
            }
            
            mp[sum]++;
        }
        return count ;
    }
};

SPIRAL MATRIX
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        
        vector <int> res;
        
        int row = matrix.size();
        int col = matrix[0].size();
        
        int count = 0;
        int total = row*col;
        
        //index intalizartion
        int start_row = 0;
        int start_col = 0;
        int end_row = row - 1;
        int end_col = col - 1;
        while(count<total)
        {
            //print starting r0w
            for(int i = start_col;count<total && i<=end_col;i++)
            {
                res.push_back(matrix[start_row][i]);
                count++;
            }
            start_row++;
            
            //print end col;
            
            for(int i = start_row;count<total && i<=end_row;i++)
            {
                res.push_back(matrix[i][end_col]);
                count++;
            }
            end_col--;
            
            //print end row
            
            for(int i = end_col;count<total && i>=start_col;i--)
            {
                res.push_back(matrix[end_row][i]);
                count++;
            }
            end_row--;
            
            //print start col in bottom up direction
            
            for(int i = end_row;count<total && i>=start_row;i--)
            {
                res.push_back(matrix[i][start_col]);
                count++;
            }
            start_col++;
        }
        
        
        
        return res;
        
        
    }
};

WORD SEARCH
class Solution {
public:
    bool look(vector<vector<char>> &board, string word,int i,int j,int l){
        if(l==word.size())  return true;   
       
        if(i<0 || i>=board.size() || j<0 || j>=board[0].size() || board[i][j]!=word[l])  return false;  
        board[i][j]='0';                                  
        if(look(board,word,i-1,j,l+1)) return true;       
        if(look(board,word,i,j-1,l+1)) return true;       
        if(look(board,word,i,j+1,l+1)) return true;       
        if(look(board,word,i+1,j,l+1)) return true;      
 board[i][j]=word[l];                              
        return false;
    }
    bool exist(vector<vector<char>>& board, string word) {
        for(int i=0;i<board.size();i++){                             
            for(int j=0;j<board[0].size();j++){
                if(board[i][j]==word[0] && look(board,word,i,j,0))                  
                    return true;
            }
        }
        return false;
    }
};

JUMP GAME
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        vector<int>dp(n,false);
        dp[n-1] = true;
        for(int i=n-2;i>=0;i--){
            for(int j=1;j<=nums[i] && j+i<n;j++){
                if(dp[j+i]){
                    dp[i]=true;
                    break;
                }
            }
        }
        return dp[0];
        
    }
};
